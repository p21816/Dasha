#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



public partial class Phonebook : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Определения метода расширяемости
  partial void OnCreated();
  partial void InsertPeople(People instance);
  partial void UpdatePeople(People instance);
  partial void DeletePeople(People instance);
  partial void InsertPhones(Phones instance);
  partial void UpdatePhones(Phones instance);
  partial void DeletePhones(Phones instance);
  #endregion
	
	public Phonebook(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public Phonebook(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public Phonebook(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public Phonebook(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<People> People
	{
		get
		{
			return this.GetTable<People>();
		}
	}
	
	public System.Data.Linq.Table<Phones> Phones
	{
		get
		{
			return this.GetTable<Phones>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.People")]
public partial class People : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Firstname;
	
	private string _Lastname;
	
	private System.Nullable<System.DateTime> _Birthdate;
	
	private string _PersonalNumber;
	
	private System.Nullable<int> _MoodId;
	
	private EntitySet<Phones> _Phones;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    partial void OnBirthdateChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdateChanged();
    partial void OnPersonalNumberChanging(string value);
    partial void OnPersonalNumberChanged();
    partial void OnMoodIdChanging(System.Nullable<int> value);
    partial void OnMoodIdChanged();
    #endregion
	
	public People()
	{
		this._Phones = new EntitySet<Phones>(new Action<Phones>(this.attach_Phones), new Action<Phones>(this.detach_Phones));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firstname", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Firstname
	{
		get
		{
			return this._Firstname;
		}
		set
		{
			if ((this._Firstname != value))
			{
				this.OnFirstnameChanging(value);
				this.SendPropertyChanging();
				this._Firstname = value;
				this.SendPropertyChanged("Firstname");
				this.OnFirstnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lastname", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Lastname
	{
		get
		{
			return this._Lastname;
		}
		set
		{
			if ((this._Lastname != value))
			{
				this.OnLastnameChanging(value);
				this.SendPropertyChanging();
				this._Lastname = value;
				this.SendPropertyChanged("Lastname");
				this.OnLastnameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthdate", DbType="Date")]
	public System.Nullable<System.DateTime> Birthdate
	{
		get
		{
			return this._Birthdate;
		}
		set
		{
			if ((this._Birthdate != value))
			{
				this.OnBirthdateChanging(value);
				this.SendPropertyChanging();
				this._Birthdate = value;
				this.SendPropertyChanged("Birthdate");
				this.OnBirthdateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalNumber", DbType="Char(16)")]
	public string PersonalNumber
	{
		get
		{
			return this._PersonalNumber;
		}
		set
		{
			if ((this._PersonalNumber != value))
			{
				this.OnPersonalNumberChanging(value);
				this.SendPropertyChanging();
				this._PersonalNumber = value;
				this.SendPropertyChanged("PersonalNumber");
				this.OnPersonalNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoodId", DbType="Int")]
	public System.Nullable<int> MoodId
	{
		get
		{
			return this._MoodId;
		}
		set
		{
			if ((this._MoodId != value))
			{
				this.OnMoodIdChanging(value);
				this.SendPropertyChanging();
				this._MoodId = value;
				this.SendPropertyChanged("MoodId");
				this.OnMoodIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Phones_To_People", Storage="_Phones", ThisKey="Id", OtherKey="People_id", DeleteRule="CASCADE")]
	public EntitySet<Phones> Phones
	{
		get
		{
			return this._Phones;
		}
		set
		{
			this._Phones.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Phones(Phones entity)
	{
		this.SendPropertyChanging();
		entity.People = this;
	}
	
	private void detach_Phones(Phones entity)
	{
		this.SendPropertyChanging();
		entity.People = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Phones")]
public partial class Phones : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private int _People_id;
	
	private string _Phone;
	
	private EntityRef<People> _People;
	
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPeople_idChanging(int value);
    partial void OnPeople_idChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
	
	public Phones()
	{
		this._People = default(EntityRef<People>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="people_id", Storage="_People_id", DbType="Int NOT NULL")]
	public int People_id
	{
		get
		{
			return this._People_id;
		}
		set
		{
			if ((this._People_id != value))
			{
				this.OnPeople_idChanging(value);
				this.SendPropertyChanging();
				this._People_id = value;
				this.SendPropertyChanged("People_id");
				this.OnPeople_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="phone", Storage="_Phone", DbType="VarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Phones_To_People", Storage="_People", ThisKey="People_id", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
	public People People
	{
		get
		{
			return this._People.Entity;
		}
		set
		{
			People previousValue = this._People.Entity;
			if (((previousValue != value) 
						|| (this._People.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._People.Entity = null;
					previousValue.Phones.Remove(this);
				}
				this._People.Entity = value;
				if ((value != null))
				{
					value.Phones.Add(this);
					this._People_id = value.Id;
				}
				else
				{
					this._People_id = default(int);
				}
				this.SendPropertyChanged("People");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
