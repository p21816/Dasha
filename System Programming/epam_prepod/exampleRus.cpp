/* В следующем примере демонстрируется использование функций для создания и регистрации локального класса,
   а затем на базе данного класса создание простейшего win32-приложения. */

// главная библиотека Windows для создания приложений под данную операционную систему
#include <windows.h>

/* Библиотека для использования типа данных TCHAR, который используется
   в Win32 для создания строк, состоящих из однобайтных символов ANSI-кодировки, 
   двухбайтных символов (DBCS) или использования символов Unicode. */

#include <tchar.h>                          
                                            
// Прототип функции окна
LRESULT CALLBACK WndProc (HWND, UINT, WPARAM, LPARAM) ;


/* Точка входа в приложение

   Функция WinMain является главной функцией при разработки Win32-приложений и
   является точкой запуска программы на выполнение.
   Если функция выполнена успешно (получено сообщение WM_QUIT при завершении),
   то будет возвращено значение, которое содержится в параметре wParam объекта MSG.
   Если выполнение функции прервётся до запуска цикла обработки сообщений,
   то функция возвратит ноль.   */

int APIENTRY _tWinMain( HINSTANCE hInstance,        // уникальный идентификатор текущего приложения
                        HINSTANCE hPrevInstance,    /* Уникальный идентификатор предыдущего приложения 
                                                       (всегда равен NULL).   */
                        LPTSTR szCmdLine,           /* Указатель на строку, заканчивающуюся нуль-символом, которая 
                                                       идентифицирует командную строку приложения исключая название самого приложения. */
                                                      
                        int iCmdShow)               /* Спецификатор, содержащий стиль отображения окна.
                                                       Он может иметь следующие значения:
SW_HIDE - скрыть окно и активизировать другое.
SW_MAXIMIZE - развернуть во весь экран.
SW_MINIMIZE - минимизировать окно в трейд и активизировать слуедующее окно на верхнем уровне.
SW_RESTORE - активизировать и отобразить окно. Если окно раскрыто во весь экран или скрыто в трейде, то система отобразит окно в первоначальном виде.
SW_SHOW - активизировать и отобразить окно с первоначальными текущими параметрами и позицией.
SW_SHOWMAXIMIZED - активизировать и отобразить окно в полноэкранном режиме.
SW_SHOWMINIMIZED - активизировать и скрыть окно в трейде.
SW_SHOWMINNOACTIVE - скрыть окно в трейде. Аналогично стилю SW_SHOW за исключением того, что окну не активно.
SW_SHOWNA - отобразить окно с первоначальными текущими параметрами и позицией. Аналогично стилю SW_SHOWMINIMIZED за исключением того, что окну не активно.
SW_SHOWNOACTIVATE - отобразить окно с последними сохранёнными параметрами и позицией. Аналогично стилю SW_SHOWNORMAL за исключением того, что окну не активно.
SW_SHOWNORMAL - активизировать и отобразить окно. Если окно раскрыто во весь экран или скрыто в трейде, то система восстановит окно в оригинальном виде.    */

{
    HWND        hwnd ;          // уникальный идентификатор окна
    MSG         msg ;           // структура сообщения
    WNDCLASSEX  wndclass ;      // структура класса окна
    
    // заполнение параметров структуры класса окна, описывающее главное окно приложения
    
    wndclass.cbSize        = sizeof (wndclass) ;                        // размер структуры
    wndclass.style         = CS_HREDRAW | CS_VREDRAW ;                  // стиль перерисовки в случае изменения горизонтальных и вертикальных размеров окна 
    wndclass.lpfnWndProc   = WndProc ;                                  // указатель на функцию окна 
    wndclass.cbClsExtra    = 0 ;                                        // точный размер дополнительных байт в памяти, занимаемых структурой класса окна (обычно имеет значение 0)
    wndclass.cbWndExtra    = 0 ;                                        // точный размер дополнительных байт впамяти, занимаемых экземпляром окна (обычно имеет значение 0)
    wndclass.hInstance     = hInstance ;                                // уникальный идентификатор приложения 
    wndclass.hIcon         = LoadIcon (NULL, IDI_APPLICATION) ;         // иконка приложения по умолчанию
    wndclass.hCursor       = LoadCursor (NULL, IDC_ARROW) ;             // курсор по умолчанию
    wndclass.hbrBackground = (HBRUSH) GetStockObject (WHITE_BRUSH) ;    // белый фон окна 
    wndclass.lpszMenuName  = NULL ;                                     // имя ресурсного меню
    wndclass.lpszClassName = L"HelloWin" ;                              // имя класса окна
    wndclass.hIconSm       = LoadIcon (NULL, IDI_APPLICATION) ;         // предопределённая маленькая иконка приложения, которая асоциируется с классом окна 
     
    // регистрация класса окна
    RegisterClassEx (&wndclass) ;
    
    /*  Функция CreateWindowEx создаёт в памяти частичное, выскакивающее или дочернее win-окно,
        которое точно определяет класс окна, заголовок, стиль  и необязательные параметры
        расположения и размер окна.
        В случае успешного выполнения функция вернёт дескриптор созданного в памяти окна,
        в противном случае - значение NULL. Для просмотра кода ошибки нужно использовать функцию GetLastError. */
    
    hwnd = CreateWindowEx ( WS_EX_TOPMOST,                  // специальны расширенный стиль создаваемого окна
                            L"HelloWin",                    // имя класса окна
                            L"The Hello Students Program",  // заголовок окна
                            WS_OVERLAPPEDWINDOW,            // стиль окна
                            CW_USEDEFAULT,                  // первоначальная позиция по оси абцисс x
                            CW_USEDEFAULT,                  // первоначальная позиция по оси ординат y
                            CW_USEDEFAULT,                  // первоначальный размер по оси абцисс x (длина)
                            CW_USEDEFAULT,                  // первоначальный размер по оси ординат y (высота)
                            NULL,                           // идентификатор родительского окна
                            NULL,                           // идентификатор меню окна
                            hInstance,                      // идентификатор приложения
		                    NULL) ;		                    // дополнительный параметр создания окна

    // в случае ошибки при создании экземпляра окна прервать выполнение программы
    if (!hwnd)
        return false;
        
    // отобразить окно прграммы и её содержимое
    ShowWindow (hwnd,           // идентификатор экземпляра окна
                iCmdShow) ;     /* Параметр, определяющий в каком виде отобразить окно. 
                                   Значение параметра аналогичны одноимённому параметру главной функции WinMain.*/
                                   
    /* Функция UpdateWindow обновляет клиентскую область окна, путём отправки сообщения WM_PAINT экземпляру
       при условии, если обновляемый регион не пуст. Функция отправляет WM_PAINT сообщение прямо функции окна 
       минуя очередь сообщений приложения. Если обновляемый регион пуст, то сообщение не отправляется.  */
    
    UpdateWindow (hwnd) ;   // идентификатор экземпляра окна для обновления его клиентской области

    /* Запуск программной очереди сообщений
    
       Система автоматически создаёт очередь сообщений для каждого оконного процесса. Если при создании приложения
       создаётся несколько экземпляров окна, то очередь сообщений при своём создании должна предусматривать
       обработку сообщений из нескольких окон; очередь должна отслеживать/отыскивать соответствующие сообщения
       процесса и направлять их соответствующей функции экземпляра окна.
       Т.к. система распределяет сообщения для отдельных экземпляров окон в приложении, то главный процесс
       приложения должен создать хотя бы одно окно первее чем запуститьс очередь обработки сообщения.
       Большинство типичных Win-приложений включают создание только одного экземпляра окна: создание класса,
       его регистрация, создание и отображение главного экземпляра окна, а затем запуск цикла обработки сообщений.
       Всё это создаётся в главной функции приложения WinMain.
       Создание цикла обработки сообщения происходит с помощью использования функций GetMessage и DispatchMessage,
       а также функцию TranslateMessage в случае обработки программой специфического ввода. */
    
    /* Основная задача функции GetMessage заключается в "вытаскивает" соответствующих сообщений из очереди
       сообщений приложения до тех пор пока не встретиться сообщение WM_QUIT. после каждого вынутого сообщения
       функция возвращает не нулевой результат. В случае получения сообщения WM_QUIT функция возвращает ноль, а
       в случае возникновения ошибки - значение -1. */
    
    BOOL bRet;
    
    while( (bRet = GetMessage( &msg, NULL, 0, 0 )) != 0)    
    { 
        if (bRet == -1)
        {
            //Сообщение об ошибке и выход из программы...
        }
        else
        {
            TranslateMessage(&msg); // транслирует сообщение, поступающее от виртуальной клавиши, в доступное сообщение
            DispatchMessage(&msg);  // передача сообщения в соответствующую функцию окна                                       
        }
    }  
    
    // возврат кода выхода их системы
    return msg.wParam ;
}


LRESULT CALLBACK WndProc (HWND hwnd,                    // идентификатор экземпляра окна, от которого поступает сообщение
                          UINT iMsg,                    // непосредственно само сообщение
                          WPARAM wParam, LPARAM lParam) /* Дополнительные параметры сообщения. Содержимое данных переменных
                                                           зависит от значения самого сообщения. */
{
    HDC         hdc ;       // дескриптор(описатель) контекста устройства
    PAINTSTRUCT ps ;        // структура рисования: используется для рисования в клиентско области окна приложения                               
    RECT        rect ;      // структура прямоугольника

    switch (iMsg) {
            
            /* Событие WM_CREATE возникает, когда приложение требует создать экземпляр окна с помощью функций
               CreateWindowEx или CreateWindow (событие возникает до возврата значение функцией). 
               Функция окна получает и обрабатывает сообщение о создании нового экземпляра окна, только после того,
               как окно будет создано, но перед отображением его на экране. */
            
            case WM_CREATE :
                return 0 ;

            
            /* Событие WM_PAINT возникает, когда система или другое приложение требует перерисовать часть
               окна приложения. Событие посылается когда вызываются функции UpdateWindow или RedrawWindow, 
               а также благодаря функции DispatchMessage, когда приложение получает данное сообщение 
               WM_PAINT путём использования функций GetMessage или PeekMessage. */
               
            case WM_PAINT :
                
                /* Функция BeginPaint подготавливает соответствующий экземпляр окна для рисования и 
                   заполняет структуру рисования PAINTSTRUCT соответствующей информацией.
                   В случае успешного выполнения функция возвратит описатель контекста устройства 
                   для указанного окна, в противном случае - значение NULL, обозначающий, что указанное
                   описатель контекста устройства не доступно.  */

                // инициация начала процесса рисования в окне
	            hdc = BeginPaint (hwnd,     // идентификатор окна для перерисовки
	                              &ps) ;    // !!!УКАЗАТЕЛЬ!!! на стуктуру PAINTSTRUCT, который содержит информацию о рисовании

                    /* Функция GetClientRect отыскивает и возвращает параметры рабочей области окна.
                       Рабочие координаты окна: верхний левый и правый нижний углы клиентской области окна. */
                    
                    // получение размера рабочей (клиентской) области окна
                    
                    GetClientRect (hwnd,        // идентификатор окна, чьи рабочие параметры необходимы для рисования
                                   &rect) ;     /* !!!УКАЗАТЕЛЬ!!! на структуру RECT, который инициализируется
                                                   соответствующими рабочими параметрами окна.
                                                   Левый верхний угол имеет нулевые координаты. 
                                                   Правый нижний угол включает параметры длины и высоты окна.   */
               
                    // рисование форматированного текста в заданной прямоугольной области
                    
                    DrawText (hdc,                         // описатель контекста устройсва
                              L"Hello, students ! ! !",    // указатель на выводимую строку
                              -1,                          /* точный размер выводимой строки типа TCHAR.
                                                              Если будет установленно значение -1, то строка содержит 
                                                              завершающий нуль символ и функция вычисляет размер автоматически. */
                              &rect,                       /* !!!УКАЗАТЕЛЬ!!! на структуру RECT, который содержет информацию о треугольнике,
                                                              в котором рисуется форматированный текст.    */
                              DT_SINGLELINE | DT_CENTER | DT_VCENTER) ; // стиль вывода форматированного текста
                                                                                                                                                     
                              
                /* Функция EndPaint function указывает на окончание рисования в соответствующем окне.
                   Вызывается всегда после функции BeginPaint, но только после окончания процесса рисования.    */
                
                EndPaint (hwnd,     // идентификатор окна, который использовался для перерисовки
                          &ps) ;    /* !!!УКАЗАТЕЛЬ!!! на стуктуру PAINTSTRUCT, который содержит информацию о рисовании и
                                       инициализированной функцией BeginPaint. */

                return 0 ;

        /* Событие WM_DESTROY возникает, когда окно уничтожается. Оно отправляется функции окна
           после уничтожение окна, но перед исчезновением окна с экрана.  */
           
        case WM_DESTROY :
            
            /* Функция PostQuitMessage используется для выхода из цыкла обработки сообщений программы.
               Она посылает сообщение WM_QUIT текущему управляющему процессу, после чего цикл процесса
               останавливается и возвращает контроль главной функции WinMain. */
           
            PostQuitMessage (0) ;   // инициирует событие WM_QUIT в текущем управляющем потоке
            return 0 ;
    }

    /* Функция DefWindowProc вызывает функцию окна по умолчанию для передачи необработанных действий
       для любый сообщений окна, которые не смогла обработать приложение. Эта функция гарантирует, что
       каждое событие будет обработано. Данная функция вызывается с аналогичными параметрами что и функция окна.    */
    
    return DefWindowProc (hwnd, iMsg, wParam, lParam) ;
}